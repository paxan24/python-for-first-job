"""
Настройка окружения
"""
    Настройка окружения поможет организовать работу и избежать конфликтов между зависимостями:

I. Установить нужную версию Python.
    Установка Python: 
        Загрузите и установите последнюю версию Python с официального сайта. Убедитесь, что отметили опцию "Add Python to PATH".
        Иногда разработчики выбирают конкретную версию Python, чтобы обеспечить совместимость кода с определёнными библиотеками и зависимостями.
        Бывает, что более новые версии Python могут не поддерживать некоторые старые библиотеки, и наоборот.
            Почему "прыгают" по версиям:
                - Совместимость: Некоторые проекты требуют определённых библиотек, которые поддерживаются только в определённых версиях Python.
                - Функциональность: Новые версии Python могут включать новые функции и улучшения, которые нужны для проекта.
                - Безопасность: Обновления версий часто включают исправления уязвимостей, что важно для безопасности проекта.
            Установка нескольких версий Python (Как это делается):
                Например, через pyenv можно установить и управлять несколькими версиями Python (Sh):
                pyenv install 3.8.10
                pyenv install 3.9.7
            Выбор версии для проекта:
                Виртуальное окружение позволит использовать нужную версию Python для конкретного проекта.
        Эти шаги помогают обеспечить стабильную работу проекта и избежать конфликтов.
        # (Sh) - это сокращение для терминала или командной строки (shell) - означает, что команда должна быть 
        выполнена в командной строке или терминале твоей операционной системы, чтобы установить или активировать что-либо.
        Например:
          Открытие командной строки Windows:
          Нажмите Win+R, введите cmd и нажмите Enter.
II. Создать виртуальное окружение.
    - Создание папки проекта:
          Например: C:\Users\YourName\Projects\MyProject.
        Используйте команду cd, чтобы перейти в вашу папку (Sh):
          Например: cd C:\Users\YourName\Projects\MyProject
    - Создание виртуального окружения (помогают изолировать зависимости проекта):
        Используйте команду (Sh):
          python -m venv myenv (Это создаст папку myenv с вашим виртуальным окружением.)
    - Активация виртуального окружения на Windows (Sh):
               .\myenv\Scripts\activate
                                        
III. Работа с зависимостями (pip list, pip freeze, pip install/uninstall).
    Зависимости — это библиотеки или пакеты, которые вы импортируете для работы в вашем проекте.
        Например, если вам нужны инструменты для обработки данных, можно использовать библиотеки как numpy или pandas.
        А если работаете с веб-сайтами, то Flask или Django могут быть зависимостями. 
        Часто используют requirements.txt файл для указания всех зависимостей, чтобы другие люди могли легко воспроизвести ваше окружение.
    Инструмент pip — это менеджер пакетов, который позволяет вам устанавливать, обновлять и управлять библиотеками и пакетами.
        С его помощью можно легко добавлять необходимые зависимости в проект.
        Например, чтобы установить библиотеку numpy, вы просто вводите pip install numpy.
        Преимущество pip в том, что он также позволяет поддерживать зависимости в актуальном состоянии и удалять ненужные пакеты.
    (Sh): pip list - Выводит список всех установленных пакетов и их версии в текущем окружении.    
        Пример вывода: Package    Version
                       ---------- -------
                       numpy      1.21.2
                       pandas     1.3.3
                       requests   2.26.0
    (Sh): pip freeze > requirements.txt - Создает файл requirements.txt, который содержит список всех установленных пакетов и их версий в текущем окружении.
                                          Полезно для воспроизведения окружения на другой машине.
        Пример вывода: numpy==1.21.2
                       pandas==1.3.3
                       requests==2.26.0
    (Sh): pip install <package_name> - Устанавливает указанный пакет из PyPI.
        Пример (Sh): pip install numpy либо pip install numpy==1.21.2 (Если требуется установить конкретную версию).
    (Sh): pip uninstall <package_name> - Удаляет указанный пакет.
        Пример (Sh): pip uninstall numpy
    (Sh): pip install -r requirements.txt - Устанавливает все пакеты, перечисленные в файле requirements.txt.







